/// \file Package management interfaces.
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_PACKAGES_IDL_
#define NIRVANA_PACKAGES_IDL_

#include "BindError.idl"

module Nirvana {

/// Package management API.
module PM {

struct Binding
{
	long module_id;
	string binary_path;
	unsigned short platform;
	unsigned short module_flags;
	unsigned short object_flags;
};

struct ModuleBinding
{
	string name;
	unsigned long version;
	unsigned short flags;
};

struct ModuleBindings
{
	sequence <ModuleBinding> bindings;
	unsigned short module_flags;
};

const unsigned short MODULE_FLAG_SINGLETON = 1;
const unsigned short OBJECT_FLAG_OBJECT = 1;
const unsigned short OBJECT_FLAG_EXPORT = 2;

/// Package database interface.
interface PackageDB
{
	void get_binding (in string name, in PlatformId platform, out Binding binding);

	string get_module_name (in ModuleId id);

	typedef sequence <ModuleId> Modules;

	Modules get_module_dependencies (in ModuleId id);
	Modules get_dependent_modules (in ModuleId id);
};

interface PacMan;

/// Installed packages.
interface Packages : packageDB
{
	/// Start management transaction.
	/// Returns `Nil` if management transaction is already started by other client.
	PacMan manage ();
};

/// Package management transaction interface.
interface PacMan : PackageDB
{
	void commit () raises (BindError::Error);
	void rollback () raises (BindError::Error);

	PlatformId register_binary (in string bin_path, in string module_name, in unsigned short flags)
		raises (BindError::Error);

	exception HasDependent
	{
		Modules dependent;
	};

	void unregister (in string module_name) raises (BindError::Error, HasDependent);
};

/// Module identifiers <= 100 are reserved for system.
const ModuleId MAX_SYS_MODULE_ID = 100;

};
};
