/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_MODULE_IDL_
#define NIRVANA_MODULE_IDL_

module Nirvana {

native ConstPointer;
native AtExitFunc;
native Deleter;
native Pointer; ///< void*

/// Module interface
/// Current module object is available as `const Module the_module;`.
pseudo interface _Module
{
  /// Loaded module base address.
  readonly attribute ConstPointer base_address;

  /// Add atexit function
  void atexit (in AtExitFunc f);

  /// Unique ID of this module in the package manager database.
  readonly attribute long id;

	///@{
	/// Context-specific storage.
	/// It's similar to the thread-local storage.

	/// Context-specific data key.
	/// 
	/// </summary>
	typedef unsigned short CS_Key;

	/// Allocate context-specific data key.
	///
	/// \param deleter Optional deleter function.
	/// \returns Context-specific data key.
	CS_Key CS_alloc (in Deleter deleter);

	/// Free context-specific data key.
	///
	/// \param key The key allocated by CS_alloc.
	void CS_free (in CS_Key key);

	/// Set context-specific value.
	/// 
	/// \param key Context-specific key.
	/// \param ptr The new value.
	void CS_set (in CS_Key key, in Pointer ptr);

	/// Get context-specific value.
	/// 
	/// \param key Context-specific key.
	/// \returns The value set by TLS_set or `nullptr`.
	Pointer CS_get (in CS_Key key);

	///@}

};

};

#endif
