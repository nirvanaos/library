/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_POSIX_IDL_
#define NIRVANA_POSIX_IDL_

#include "FileStat.idl"

module Nirvana {

native Pointer; ///< void*
native ConstPointer; ///< const void*
native Size; ///< size_t
native SigactionPtr;
native SigactionConstPtr;
native Deleter;
native Int;
native UInt;
native UIntPtr; ///< uintptr_t
native CharPtr;

abstract valuetype Locale;

typedef unsigned long long SteadyTime;
typedef unsigned long long DeadlineTime;

/// Core interface used by the run-time library to implement POSIX API.
/// Usually client do not use this interface directly.
pseudo interface POSIX
{
	///@{
	/// Time operations.

	/// Current system time with time zone information.
	TimeBase::UtcT system_clock ();

	/// Current UTC time.
	TimeBase::UtcT UTC ();

	/// Duration since system startup in 100 ns intervals.
	SteadyTime steady_clock ();

	/// Duration since system startup.
	DeadlineTime deadline_clock ();

	/// Steady clock frequency, Hz.
	readonly attribute DeadlineTime deadline_clock_frequency;

	///@}

	/// C runtime error number location (errno).
	readonly attribute Pointer error_number;

	/// Raise signal.
	void raise (in short signum);

	/// Currently not implemented.
	void sigaction (in short signum, in SigactionConstPtr act, in SigactionPtr oldact);

	///@{
	/// Simple and fast pseudo-random number generator.
	
	/// \brief Initialize pseudo-random number generator.
	/// 
	/// \param seed An integer value to be used as seed by the pseudo-random number generator algorithm.
	void srand (in UInt seed);

	/// \brief Generate random number.
	/// 
	/// \returns An integer value between 0 and std::numeric_limits <UInt>::max ().
	UInt rand ();

	///@}

	/// Returns current working directory path.
	/// The returned path is always absolute.
	string get_current_dir ();

	/// Changes the current working directory of the current domain to the directory specified in \p path.
	void chdir (in string path);

	///@{
	/// POSIX file descriptor API.
	
	typedef Int FilDesc;

	/// POSIX open()
	FilDesc open (in string path, in UInt oflag, in mode_t mode);

	/// POSIX close()
	void close (in FilDesc fd);

	/// POSIX read()
	Size read (in FilDesc fd, in Pointer p, in Size size);

	/// POSIX write()
	void write (in FilDesc fd, in ConstPointer p, in Size size);

	/// POSIX lseek()
	FileSize seek (in FilDesc fd, in FileOff offset, in Int whence);

	/// POSIX fcntl()
	FilDesc fcntl (in FilDesc fd, in UInt cmd, in UIntPtr arg);

	/// POSIX fsync()
	void fsync (in FilDesc fd);

	/// POSIX dup2()
	void dup2 (in FilDesc src, in FilDesc dst);

	/// POSIX isatty()
	boolean isatty (in FilDesc fd);

	///@}

	/// Suspend execution for the specified period.
	/// 
	/// We don't recommend to use it in the servant implementations.
	/// Use TimerEventService instead.
	/// 
	/// \param period100ns Sleep time in 100 ns intervals.
	void sleep (in TimeBase::TimeT period100ns);

	/// Reschedule current execution domain and let other tasks to be executed.
	/// Must be called in long foreground tasks.
	void yield ();

	FilDesc mkostemps (in CharPtr tpl, in UInt suffix_len, in UInt flags);

	void unlink (in string path);
	void rmdir (in string path);
	void mkdir (in string path, in mode_t mode);
	void stat (in string path, out FileStat fs);
	void rename (in string oldname, in string newname);

	///@{
	/// Context-specific storage.
	/// It's similar to the thread-local storage.

	/// Context-specific data key.
	/// 
	/// </summary>
	typedef unsigned short CS_Key;

	/// Allocate context-specific data key.
	///
	/// \param deleter Optional deleter function.
	/// \returns Context-specific data key.
	CS_Key CS_alloc (in Deleter deleter);

	/// Free context-specific data key.
	///
	/// \param key The key allocated by CS_alloc.
	void CS_free (in CS_Key key);

	/// Set context-specific value.
	/// 
	/// \param key Context-specific key.
	/// \param ptr The new value.
	void CS_set (in CS_Key key, in Pointer ptr);

	/// Get context-specific value.
	/// 
	/// \param key Context-specific key.
	/// \returns The value set by TLS_set or `nullptr`.
	Pointer CS_get (in CS_Key key);

	///@}

	///@{
	/// Localization.

	attribute Locale locale;
	Nirvana::Locale create_locale (in Int mask, in string name, in Nirvana::Locale base);

	///@}

	/// \returns the number of concurrent threads supported by the implementation.
	readonly attribute unsigned long hardware_concurrency;

};

};

#endif
