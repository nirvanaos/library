/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_RUNTIMESUPPORT_IDL_
#define NIRVANA_RUNTIMESUPPORT_IDL_

module Nirvana {

native ConstPointer; ///< const void*

/// \brief Used for STL iterator debugging.
/// May be used for other purposes.
pseudo interface RuntimeProxy
{
	/// Pointer passed to System::proxy_get
	///   or `nullptr` if System::proxy_reset was called.
	readonly attribute ConstPointer _object;
};

/// Debug support.
/// Notice that this API may be not implemented on some systems.
/// Core implementation available as const Debugger the_debugger;
pseudo interface Debugger
{
	/// Debug event type
	enum DebugEvent
	{
		DEBUG_INFO,    ///< Trace.
		DEBUG_WARNING, ///< Warning.
		DEBUG_ASSERT,  ///< Assertion failed.
		DEBUG_ERROR    ///< Error.
	};

	/// Generate debug event.
	/// 
	/// \param type Debug event type.
	///             If type >= DEBUG_INFO, the program execution will be interrupted
	///             and the debugger will be invoked, if possible.
	///             If type >= DEBUG_ASSERT and debugger is not available, causes abortion of
	///             the current execution domain.
	/// 
	/// \param message     Debug message.
	/// \param file_name   (optional) Source file name.
	/// \param line_number (optional) Source line number.
	void debug_event (in DebugEvent type, in string message, in string file_name, in long line_number);

	/// Search map for runtime proxy for object \p obj.
	/// If proxy exists, returns it. Otherwise creates a new one.
	/// If runtime proxy API is not implemented, always return `nullptr`.
	/// 
	/// \param obj Pointer used as a key.
	/// \returns RuntimeProxy for obj.
	///          If runtime support is disabled, returns `nil` reference.
	RuntimeProxy proxy_get (in ConstPointer obj);

	/// Reset runtime proxy for object \p obj.
	/// \param obj Pointer used as a key.
	/// If proxy for \p obj exists, it will return `nullptr` after this call.
	void proxy_reset (in ConstPointer obj);
};

};

#endif
