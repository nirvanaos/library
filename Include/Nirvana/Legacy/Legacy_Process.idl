/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_LEGACY_PROCESS_IDL_
#define NIRVANA_LEGACY_PROCESS_IDL_

#include "../RuntimeError.idl"

module Nirvana {

abstract interface Access;

struct InheritedFile
{
	unsigned short ifd;
	Access access;
};

typedef sequence <InheritedFile> InheritedFiles;

module Legacy {

interface Process
{
	readonly attribute boolean completed;
	readonly attribute long exit_code;
	void wait ();
	boolean kill ();
};

interface ProcessCallback
{
	oneway void on_process_finish (in Legacy::Process process);
};

interface ProcessFactory
{
	typedef sequence <string> StringSeq;

	Process spawn (in string file, in StringSeq argv, in StringSeq envp, in string work_dir,
		in InheritedFiles inherit, in ProcessCallback callback) raises (RuntimeError);
};

};
};

#endif
