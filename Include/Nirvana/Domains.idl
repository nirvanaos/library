/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_DOMAINS_IDL_
#define NIRVANA_DOMAINS_IDL_

#include <CORBA/Components.idl>
#include <CORBA/CosNaming.idl>

module Nirvana {

interface AccessDirect;

/// Module load information.
struct ModuleLoad
{
	long module_id; ///< Unique module ID.
	AccessDirect binary; /// Access to module binary file.
};

interface SysDomain;

typedef sequence <octet> SecurityId;

/// Protection domain
interface ProtDomain
{
	/// \returns The domain owner id.
	readonly attribute SecurityId user;

	/// Binds a static object.
	/// 
	/// \param name The object name.
	/// \returns Object.
	/// \throws OBJECT_NOT_EXIST Object with that name not found.
	/// \throws INV_OBJREF Object with that name exists but it is pseudo object or singleton.
	Object bind (in string name);

	/// \returns System domain.
	readonly attribute SysDomain sys_domain;

	void shutdown (in unsigned short flags);
};

typedef unsigned short Version [4];

/// Object binding information.
union BindInfo switch (boolean) {
	/// The object binding requires loading of the module.
case TRUE: ModuleLoad module_load;

	/// The object was bound in other protection domain.
case FALSE: Object loaded_object;
};

interface Installer
{
	void register_module (in CosNaming::Name path, in unsigned short flags);
};

/// Package management interface.
interface Packages
{
	/// Get binding information for the specified object name.
	/// 
	/// \param obj_name Static object name.
	/// \param platform Target platform ID.
	/// \param major Major version number.
	/// \param minor Minor version number.
	/// \param bind_info Binding information returned.
	void get_bind_info (in string obj_name, in unsigned short platform,
		in unsigned short major, in unsigned short minor, out BindInfo bind_info);

	/// Get Installer object.
	Installer get_installer ();
};

/// System management interface.
interface SysManager
{
	ProtDomain create_prot_domain (in unsigned short platform);
	ProtDomain create_prot_domain_as_user (in unsigned short platform, in string user, in string password);

	void shutdown (in unsigned short flags);
};

/// System domain
interface SysDomain : Components::CCMObject
{
	/// \returns The Nirvana version.
	readonly attribute Version version;

	typedef sequence <unsigned short> Platforms;

	/// \returns Supported platform identifiers.
	/// 
	/// First element is the host platform.
	readonly attribute Platforms supported_platforms;

	SysDomain login (in string user, in string password);

	/// \returns Protection domain associated with system domain.
	readonly attribute ProtDomain prot_domain;

	/// Package management facet.
	/// \returns Packages object.
	Packages provide_packages ();

	/// System management facet.
	/// \returns SysManager object.
	SysManager provide_manager ();

};

};

#endif
