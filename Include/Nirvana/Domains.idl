/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_DOMAINS_IDL_
#define NIRVANA_DOMAINS_IDL_

#include <CORBA/Components.idl>
#include <CORBA/CosNaming.idl>
#include "BindError.idl"

module Nirvana {

interface SysDomain;

typedef sequence <octet> SecurityId;

/// Protection domain
interface ProtDomain
{
	/// \returns The domain owner id.
	readonly attribute SecurityId user;

	/// Binds a static object.
	/// 
	/// \param name The object name.
	/// \returns Object.
	/// \throws OBJECT_NOT_EXIST Object with that name not found.
	/// \throws INV_OBJREF Object with that name exists but it is pseudo object or singleton.
	Object bind (in string name);

	/// \returns System domain.
	readonly attribute SysDomain sys_domain;

	void shutdown (in unsigned short flags);
};

typedef unsigned short Version [4];

interface PacMan;

/// Package database interface.
interface Packages
{
	struct Binding
	{
		long module_id;
		string binary_path;
		unsigned short platform;
		unsigned short module_flags;
		unsigned short object_flags;
	};

	void get_binding (in string name, in PlatformId platform, out Binding binding);

	/// Start management session.
	PacMan manage ();

	string get_module_name (in ModuleId id);

	typedef sequence <ModuleId> Modules;

	Modules get_module_dependencies (in ModuleId id);
	Modules get_dependent_modules (in ModuleId id);
};

/// Package management interface.
interface PacMan : Packages
{
	PlatformId register (in CosNaming::Name bin_path, in string module_name, in unsigned short flags)
		raises (BindError::Error);

	exception HasDependent
	{
		Modules dependent;
	};

	void unregister (in string module_name) raises (HasDependent);

	void commit ();
	void rollback ();
};

/// System management interface.
interface SysManager
{
	ProtDomain create_prot_domain (in PlatformId platform);
	ProtDomain create_prot_domain_as_user (in PlatformId platform, in string user, in string password);

	void shutdown (in unsigned short flags);
};

/// System domain
interface SysDomain : Components::CCMObject
{
	/// \returns The Nirvana version.
	readonly attribute Version version;

	typedef sequence <PlatformId> Platforms;

	/// \returns Supported platform identifiers.
	/// 
	/// First element is the host platform.
	readonly attribute Platforms supported_platforms;

	SysDomain login (in string user, in string password);

	/// \returns Protection domain associated with system domain.
	readonly attribute ProtDomain prot_domain;

	/// Package management facet.
	/// \returns Packages object.
	Packages provide_packages ();

	/// System management facet.
	/// \returns SysManager object.
	SysManager provide_manager ();

};

};

#endif
