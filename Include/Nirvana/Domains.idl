/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_DOMAINS_IDL_
#define NIRVANA_DOMAINS_IDL_

#include <CORBA/Components.idl>
#include "Packages.idl"
#include "Shell.idl"

module Nirvana {

interface SysDomain;

/// Protection domain
interface ProtDomain
{
	/// \returns The domain owner id.
	readonly attribute SecurityId user;

	/// Binds a static object.
	/// 
	/// \param name The object name.
	/// \returns Object.
	/// \throws BindError::Error.
	Object bind (in string name) raises (BindError::Error);

	/// \returns System domain.
	readonly attribute SysDomain sys_domain;

	void shutdown (in unsigned short flags);
};

typedef unsigned short Version [4];

/// System management interface.
interface SysManager
{
	ProtDomain create_prot_domain (in PlatformId platform);
	ProtDomain create_prot_domain_as_user (in PlatformId platform, in string user, in string password);

	void shutdown (in unsigned short flags);
};

struct BinaryInfo
{
	PlatformId platform;
	unsigned short module_flags;
};

/// System domain
interface SysDomain : Components::CCMObject
{
	/// \returns The Nirvana version.
	readonly attribute Version version;

	/// \returns Supported platform identifiers.
	/// 
	/// First element is the host platform.
	readonly attribute Platforms supported_platforms;

	SysDomain login (in string user, in string password);

	/// \returns Protection domain associated with system domain.
	readonly attribute ProtDomain prot_domain;

	/// Package management facet.
	/// \returns Packages object.
	PM::Packages provide_packages ();

	/// System management facet.
	/// \returns SysManager object.
	SysManager provide_manager ();

	long exec (in string path, in StringSeq argv, in string work_dir,
		in FileDescriptors files) raises (BindError::Error);

	BinaryInfo get_module_bindings (in string path, out PM::ModuleBindings bindings)
		raises (BindError::Error);
};

};

#endif
