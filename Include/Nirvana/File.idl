/// \file
/*
* Nirvana IDL support library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/

#include "RuntimeError.idl"

module Nirvana {

typedef sequence <octet> OctetSeq;

/// Random access file.
interface FileRA
{
	/// Read data.
	/// 
	/// \param pos Reading position.
	/// \param size The maximum number of bytes to be read.
	/// \param data Readed data.
	void read (in unsigned long long pos, in unsigned long size, out OctetSeq data) raises (RuntimeError);

	/// Write data
	/// 
	/// \param pos Writing position. If pos == std::numeric_limits <unsigned long long>::max(), the data will be appended to the end of file.
	/// \param data Data to write.
	void write (in unsigned long long pos, in OctetSeq data) raises (RuntimeError);
};

/// Sequential file.
interface FileS
{
	void read (in unsigned long size, out OctetSeq data) raises (RuntimeError);
	void write (in OctetSeq data) raises (RuntimeError);
};

};
