/// \file File operations.
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_FILE_IDL_
#define NIRVANA_FILE_IDL_

#include "RuntimeError.idl"
#include <CORBA/CosNaming.idl>
#include <CORBA/TimeBase.idl>

module Nirvana {

/// \brief File times
///   TimeBase::UtcT::tdf fields are always zero.
///   If TimeBase::UtcT::time field is zero than this
///   file time value is unavailable for a directory item.
struct FileTimes
{
	TimeBase::UtcT
		creation_time,
		last_access_time,
		last_write_time;
};

/// \brief Directory item: File or Directory
interface DirItem
{
	enum FileType
	{
		none,
		not_found,
		regular,
		directory,
		symlink,
		block,
		character,
		fifo,
		socket,
		unknown
	};

	readonly attribute FileType type;
	attribute unsigned short permissions;
	void get_file_times (out FileTimes times) raises (RuntimeError);
};

abstract interface Access;

/// \brief A directory.
interface Dir : DirItem, CosNaming::NamingContext
{
	/// \brief Open or create a file.
	///
	/// \param n File path relative to this directory.
	/// \param flags File open flags.
	Access open (in CosNaming::Name n, in unsigned short flags) raises (RuntimeError);
};

/// \brief A file.
interface File : DirItem
{
	/// \brief File size.
	readonly attribute unsigned long long size;

	/// \brief Open file access.
	///
	/// \param n File path relative to this directory.
	/// \param flags File open flags.
	/// \returns File access object.
	Access open (in unsigned short flags) raises (RuntimeError);
};

/// Data buffer.
typedef sequence <octet> Bytes;

/// \brief General file access.
abstract interface Access
{
	/// The File object
	readonly attribute File file;

	/// Close file access
	void close () raises (RuntimeError);
};

/// \brief Direct file access.
interface AccessDirect : Access
{
	/// Read data.
	/// 
	/// \param pos Reading position.
	/// \param size The maximum number of bytes to be read.
	/// \param[out] data Readed data.
	void read (in unsigned long long pos, in unsigned long size, out Bytes data)
		raises (RuntimeError);

	/// Write data
	/// 
	/// \param pos Writing position. If pos == std::numeric_limits <unsigned long long>::max(),
	///            the data will be appended to the end of file.
	/// \param data Data to write.
	void write (in unsigned long long pos, in Bytes data) raises (RuntimeError);

	/// Write dirty blocks to device.
	void flush () raises (RuntimeError);

	/// File size.
	attribute unsigned long long size setraises (RuntimeError);
};

/// \brief Character device access.
interface AccessChar : Access
{
	/// Read data.
	/// 
	/// \param size The maximum number of bytes to be read.
	/// \param[out] data Readed data.
	void read (in unsigned long size, out string data) raises (RuntimeError);

	/// Write data
	/// 
	/// \param data Data to write.
	void write (in string data) raises (RuntimeError);
};

};

#endif
