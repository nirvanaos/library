/// \file File operations.
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_FILE_IDL_
#define NIRVANA_FILE_IDL_

#include "CORBA/CosNaming.idl"
#include <CORBA/TimeBase.idl>
#include <CORBA/CosEventChannelAdmin.idl>

typedef unsigned short mode_t;
typedef unsigned long dev_t;
typedef unsigned long nlink_t;
typedef unsigned long blksize_t;
typedef unsigned long long blkcnt_t;

module Nirvana {

typedef CORBA::OctetSeq SecurityId;
typedef CORBA::OctetSeq DirItemId;

typedef unsigned long long ino_t; // TODO: Move out of namespace
typedef unsigned long long FileSize;

/// \brief File status structure.
///   TimeBase::UtcT::tdf fields are always zero.
///   If TimeBase::UtcT::time field is zero than this
///   file time value is unavailable for a directory item.
struct FileStat
{
	/// Unique filesystem item ID.
	DirItemId id;

	/// Owner user ID.
	SecurityId owner;

	/// Owner group ID.
	SecurityId group;

	/// File size.
	FileSize size;

	TimeBase::UtcT
		creation_time,    ///< File creation time.
		last_access_time, ///< Last data access timestamp.
		last_write_time;  ///< Last data modification timestamp.

	/// Number of blocks allocated for this object.
	blkcnt_t blkcnt;

	/// A file system - specific preferred I / O block size for this object.
	blksize_t blksize;

	/// Device ID of device containing file.
	dev_t dev;

	/// Number of hard links to the file.
	nlink_t nlink;

	/// Mode bits.
	mode_t mode;
};

enum FileType
{
	none,
	not_found,
	regular,
	directory,
	symlink,
	block,
	character,
	fifo,
	socket,
	unknown
};

/// \brief Directory item: File or Directory
interface DirItem
{
	/// Item type.
	readonly attribute FileType type;

	/// File status information.
	/// 
	/// \param [out] st FileStat structure.
	void stat (out FileStat st);

	/// \brief Delete all links to a file or empty directory.
	void remove ();

	/// \brief Get unique file system item ID.
	readonly attribute DirItemId id;
};

/// \brief Directory entry (see POSIX struct dirent).
struct DirEntry
{
	FileStat st;
	CosNaming::NameComponent name;
};

typedef sequence <DirEntry> DirEntryList;

/// Implements POSIX DIR* functionality.
interface DirIterator
{
	boolean next_one (out DirEntry de);
	boolean next_n (in unsigned long how_many, out DirEntryList l);
	void destroy ();
};

abstract interface Access;

/// \brief A directory.
interface Dir : DirItem, CosNaming::NamingContext
{
	/// \brief Open or create a file.
	///
	/// \param n File path relative to this directory.
	/// 
	/// \param flags File open flags.
	/// 
	/// \param mode Specifies the file mode bits to be applied when a new file is created.
	///             If neither O_CREAT nor O_TMPFILE is specified in flags, then mode is ignored.
	///             Zero mode means default, inherited from the parent directory.
	/// 
	/// \returns File access object.
	/// 
	/// \throws CosNaming::InvalidName Parameter \p n is invalid name.
	/// \throws CosNaming::NotFound Parent directory does not exist.
	Access open (in CosNaming::Name n, in unsigned short flags, in mode_t mode)
		raises (InvalidName, NotFound);

	/// Generates a unique temporary filename from template, creates and opens the file, and returns
	/// an open file access object for the file.
	/// 
	/// Like Unix mkostemps().
	///
	/// \param [in,out] name Name template of the form prefixXXXXXXsuffix, and the string XXXXXX is replaced
	///                      with a string that makes the filename unique.
	/// 
	/// \param suffix_len Length of the template suffix.
	/// 
	/// \param flags May be zero or include O_DIRECT or O_APPEND flags.
	/// 
	/// \param mode File creation mode. If zero, default 0600 (S_IRUSR | S_IWUSR) will be used.
	/// 
	/// \returns File access object.
	Access mkostemps (inout string name, in unsigned short suffix_len, in unsigned short flags, in mode_t mode);

	/// Skip items that would otherwise result in permission denied errors.
	const unsigned short SKIP_PERMISSION_DENIED = 0x0001;

	/// Ignore case in RegEx expression.
	const unsigned short REGEX_ICASE = 0x0002;

	/// Implements POSIX opendir functionality.
	/// 
	/// \param regexp Regular expression for the item name.
	/// 
	/// \param flags Flags.
	/// 
	/// \param how_many The \p how_many parameter determines the maximum number of entries to return
	///   in the parameter \p dl, with any remaining entries to be accessed through the returned
	///   DirIterator \p di.
	/// 
	/// \param dl The \p dl parameter is a sequence where each element is a DirEntry.
	/// 
	/// \param di The parameter \p di returns a reference to an iterator object.
	/// 
	///   If the \p di parameter returns a non-nil reference, this indicates that the call to opendir()
	///   may not have returned all of the entries and that the remaining entries (if any) must be
	///   retrieved using the iterator. This applies for all values of \p how_many.
	/// 
	void opendir (in string regexp, in unsigned short flags, in unsigned long how_many,
		out DirEntryList dl, out DirIterator di);

	/// Implements POSIX mkdir functionality.
	/// 
	/// \param n Path relative to this directory.
	///          The parent directory must already exist.
	/// 
	/// \param mode Specifies the file mode bits to be applied when a new file is created.
	///             Zero mode means default, inherited from the parent directory.
	/// 
	/// \returns `true` if a directory was created for the directory \p n resolves to,
	///          `false` otherwise.
	/// 
	/// \throws CosNaming::InvalidName Parameter \p n is invalid name.
	/// \throws CosNaming::NotFound Parent directory does not exist.
	boolean mkdir (in CosNaming::Name n, in mode_t mode) raises (InvalidName, NotFound);

	/// Get access mask for the current user.
	short access (in CosNaming::Name n);

	// TODO: Add event source for directory changes.
};

/// \brief File system root.
/// 
interface FileSystem : Dir
{
	/// \brief Obtain file system item by the unique DirItemId.
	/// 
	/// \param id File system item ID obtained from DirItem::id attribute.
	/// \returns DirItem object.
	DirItem get_item (in DirItemId id);
};

/// \brief A file.
interface File : DirItem
{
	/// \brief File size.
	readonly attribute FileSize size;

	/// \brief Open file access.
	///
	/// \param flags File open flags.
	/// \param mode Specifies the file mode bits to be applied when a new file is created.
	///             If O_CREAT is not specified in flags, then mode is ignored.
	/// \returns File access object.
	Access open (in unsigned short flags, in mode_t mode);
};

/// \brief General file access.
abstract interface Access
{
	/// The File object
	readonly attribute File file;

	/// Close file access
	void close ();

	/// File access flags
	readonly attribute unsigned short flags;

	/// Set file access flags.
	/// 
	/// \param mask The bit mask of the change flags.
	///   If mask bit is 0, the flags bit will remain the same.
	/// 
	/// \param flags The new flags.
	/// 
	void set_flags (in unsigned short mask, in unsigned short flags);

	/// \brief Create independent copy of the file access object.
	/// 
	/// This operation is not used in the POSIX descriptor duplication and works in another way.
	/// Unlike the POSIX `dup()`, new object does not share anything.
	/// Initial object attributes such as flag and position are derived
	/// but can be later changed independently from the original object.
	/// 
	/// \param mask The bit mask of the change flags.
	///   If mask bit is 0, the flags bit will remain the same.
	/// 
	/// \param flags The new flags.
	Access dup (in unsigned short mask, in unsigned short flags);
};

/// Data buffer.
typedef sequence <octet> Bytes;

/// File lock type
enum LockType {
	/// No lock.
	/// Read and write are available.
	LOCK_NONE,

	/// Shared lock. Read available. Write prohibited.
	LOCK_SHARED,

	/// A LOCK_RESERVED lock means that the process is planning on writing to the file at some point
	/// in the future but that it is currently just reading from the file. 
	/// Only a single LOCK_RESERVED lock may be active at one time, though multiple LOCK_SHARED locks
	/// can coexist with a single LOCK_RESERVED lock. LOCK_RESERVED differs from LOCK_PENDING in that
	/// new LOCK_SHARED locks can be acquired while there is a LOCK_RESERVED lock.
	/// Read available. Write prohibited.
	LOCK_RESERVED,

	/// A LOCK_PENDING lock means that the process holding the lock wants to write to the file as
	/// soon as possible and is just waiting on all current LOCK_SHARED locks to clear so that it can
	/// get an LOCK_EXCLUSIVE lock. No new LOCK_SHARED locks are permitted against the file if a
	/// LOCK_PENDING lock is active, though existing LOCK_SHARED locks are allowed to continue.
	LOCK_PENDING,

	/// Only one LOCK_EXCLUSIVE lock is allowed on the file and no other locks of any kind are allowed
	/// to coexist with an LOCK_EXCLUSIVE lock.
	LOCK_EXCLUSIVE
};

/// File lock parameters.
struct FileLock
{
	FileSize start; ///< Offset where the lock begins.
	FileSize len;   ///< Size of the locked area; zero means until EOF.
	LockType type;  ///< Lock type.
};

/// \brief Direct file access.
interface AccessDirect : Access
{
	/// Read data.
	/// 
	/// \param rel File lock to release.
	/// \param pos Reading position.
	/// \param size The maximum number of bytes to be read.
	/// \param [out] data Readed data.
	void read (in FileSize pos, in unsigned long size, out Bytes data);

	/// Write data
	/// 
	/// \param pos  Writing position. If pos == std::numeric_limits <FileSize>::max(),
	///             the data will be appended to the end of file.
	/// \param data Data to write.
	/// \param rel  File lock to release after write.
	/// \param sync Force O_SYNC mode for synchronous write-through.
	void write (in FileSize pos, in Bytes data, in boolean sync);

	/// Write dirty blocks to device.
	void flush ();

	/// File size.
	attribute FileSize size;

	/// Manage file locking.
	/// 
	/// \param fl   File lock to acquire.
	/// \param tmin Minimal lock type to acquire. Must be tmin <= fl.type.
	/// \param wait If the requested lock is blocked by other locks, wait until the request can be
	///             satisfied.
	/// \returns    The acquired lock type.
	LockType lock (in FileLock fl, in LockType tmin, in boolean wait);

	/// Get file locking.
	/// 
	/// \param fl On input to this call, \p fl describes a lock we would like to place on the file.
	///   If the lock could be placed, get_lock returns LOCK_NONE in the type field of \p fl and
	///   leaves the other fields of the structure unchanged.
	///
	///   If one or more incompatible locks would prevent this lock
	///   being placed, then get_lock () returns details about one of
	///   those locks in the \p fl.
	///
	void get_lock (inout FileLock fl);

	/// \brief Suggested I/O block size.
	/// 
	/// This size may be > than the sector size;
	/// 
	readonly attribute unsigned long block_size;
};

/// \brief Character device access.
interface AccessChar : Access,
	CosEventChannelAdmin::ProxyPushSupplier, CosEventChannelAdmin::ProxyPullSupplier
{
	/// Event: read error.
	struct Error
	{
		short error;
	};

	/// Write data
	/// 
	/// \param data Data to write.
	void write (in string data);

	/// \brief Clear reading error.
	/// If device is in read error state, clears the error state and restarts reading.
	/// 
	/// \returns Error code, if any.
	short clear_read_error ();
};

native Pointer; ///< void*
native ConstPointer; ///< const void*
native Size; ///< size_t

/// \brief Buffered file access
valuetype AccessBuf supports Access
{
	/// Read from file.
	/// 
	/// \param p  Buffer.
	/// \param cb Number of bytes to read.
	/// \returns Number of bytes actually read.
	Size read (in Pointer p, in Size cb);

	/// Write to file.
	/// 
	/// \param p  Data to write.
	/// \param cb Number of bytes to write.
	void write (in ConstPointer p, in Size cb);

	/// Direct file access.
	readonly attribute AccessDirect direct;

	/// Flush dirty buffer to file.
	void flush ();

	/// Get/set current file position.
	public FileSize position;

	private FileSize buf_pos;
	private AccessDirect access;
	private Bytes buffer;
	private unsigned long block_size;
	private unsigned short private_flags;
	private char eol [2];
};

};

#endif
