/// \file File operations.
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_FILE_IDL_
#define NIRVANA_FILE_IDL_

#include "RuntimeError.idl"
#include <CORBA/CosNaming.idl>
#include <CORBA/TimeBase.idl>

typedef unsigned short mode_t;
typedef unsigned long dev_t;
typedef unsigned long nlink_t;

module Nirvana {

typedef unsigned long long ino_t; // TODO: Move out of namespace
typedef unsigned long long FileSize;

/// \brief File status structure (see POSIX struct stat)
///   TimeBase::UtcT::tdf fields are always zero.
///   If TimeBase::UtcT::time field is zero than this
///   file time value is unavailable for a directory item.
struct FileStat
{
	ino_t ino;
	dev_t dev;
	mode_t mode;
	unsigned short type; // See FileType, packed in 2 bytes
	nlink_t nlink;
	FileSize size;
	TimeBase::UtcT
		creation_time,
		last_access_time,
		last_write_time;
};

enum FileType
{
	none,
	not_found,
	regular,
	directory,
	symlink,
	block,
	character,
	fifo,
	socket,
	unknown
};

/// \brief Directory item: File or Directory
interface DirItem
{
	/// Item type.
	readonly attribute FileType type;

	/// File status information.
	/// 
	/// \param [out] st FileStat structure.
	void stat (out FileStat st) raises (RuntimeError);

	/// \brief Delete all links to a file or empty directory.
	void remove () raises (RuntimeError);
};

/// \brief Directory entry (see POSIX struct dirent).
struct DirEntry
{
	FileStat st;
	CosNaming::NameComponent name;
};

typedef sequence <DirEntry> DirEntryList;

/// Implements POSIX DIR* functionality.
interface DirIterator
{
	boolean next_one (out DirEntry de) raises (RuntimeError);
	boolean next_n (in unsigned long how_many, out DirEntryList l) raises (RuntimeError);
	void destroy ();

	const unsigned short SKIP_PERMISSION_DENIED = 0x0001;
	const unsigned short REGEX_ICASE = 0x0002;
};

abstract interface Access;

/// \brief A directory.
interface Dir : DirItem, CosNaming::NamingContext
{
	/// \brief Open or create a file.
	///
	/// \param n File path relative to this directory.
	/// 
	/// \param flags File open flags.
	/// 
	/// \param mode Specifies the file mode bits to be applied when a new file is created.
	///             If neither O_CREAT nor O_TMPFILE is specified in flags, then mode is ignored.
	/// 
	/// \returns File access object.
	/// 
	/// \throws RuntimeError
	/// \throws CosNaming::InvalidName
	/// \throws CosNaming::NotFound
	Access open (in CosNaming::Name n, in unsigned short flags, in mode_t mode)
		raises (RuntimeError, InvalidName, NotFound);

	/// Generates a unique temporary filename from template, creates and opens the file, and returns
	/// an open file access object for the file.
	/// 
	/// Like Unix mkostemps().
	///
	/// \param [in,out] name Name template of the form prefixXXXXXXsuffix, and the string XXXXXX is replaced
	///                      with a string that makes the filename unique.
	/// 
	/// \param suffix_len Length of the template suffix.
	/// 
	/// \param flags May be zero or include O_DIRECT or O_APPEND flags.
	/// 
	/// \returns File access object.
	/// 
	/// \throws RuntimeError
	Access mkostemps (inout string name, in unsigned short suffix_len, in unsigned short flags)
		raises (RuntimeError);

	void opendir (in string regexp, in unsigned short flags, in unsigned long how_many,
		out DirEntryList l, out DirIterator di) raises (RuntimeError);
};

/// \brief A file.
interface File : DirItem
{
	/// \brief File size.
	readonly attribute FileSize size raises (RuntimeError);

	/// \brief Open file access.
	///
	/// \param n File path relative to this directory.
	/// \param flags File open flags.
	/// \param mode Specifies the file mode bits to be applied when a new file is created.
	///             If O_CREAT is not specified in flags, then mode is ignored.
	/// \returns File access object.
	Access open (in unsigned short flags, in mode_t mode) raises (RuntimeError);
};

/// \brief General file access.
abstract interface Access
{
	/// The File object
	readonly attribute File file;

	/// Close file access
	void close () raises (RuntimeError);

	/// File access flags
	attribute unsigned short flags;

	/// Duplicate file access object.
	Access dup ();
};

/// Data buffer.
typedef sequence <octet> Bytes;

/// \brief Direct file access.
interface AccessDirect : Access
{
	/// Read data.
	/// 
	/// \param pos Reading position.
	/// \param size The maximum number of bytes to be read.
	/// \param[out] data Readed data.
	void read (in FileSize pos, in unsigned long size, out Bytes data)
		raises (RuntimeError);

	/// Write data
	/// 
	/// \param pos Writing position. If pos == std::numeric_limits <FileSize>::max(),
	///            the data will be appended to the end of file.
	/// \param data Data to write.
	void write (in FileSize pos, in Bytes data) raises (RuntimeError);

	/// Write dirty blocks to device.
	void flush () raises (RuntimeError);

	/// File size.
	attribute FileSize size getraises (RuntimeError) setraises (RuntimeError);

	/// Lock file. Currently not implemented.
	/// 
	/// \param start Starting byte offset in the file where the lock should begin.
	/// \param size Length of the byte range to be locked.
	/// \param op Operation.
	/// \returns `true` if success.
	boolean lock (in FileSize start, in FileSize size, in short op) raises (RuntimeError);
};

/// \brief Character device access.
interface AccessChar : Access
{
	/// Read data.
	/// 
	/// \param size The maximum number of bytes to be read.
	///   Zero means wait for input available and return all available input.
	/// 
	/// \param[out] data Readed data.
	void read (in unsigned long size, out string data) raises (RuntimeError);

	/// Write data
	/// 
	/// \param data Data to write.
	void write (in string data) raises (RuntimeError);
};

native Pointer; ///< void*
native ConstPointer; ///< const void*
native Size; ///< size_t

typedef long long FileOff;

enum SeekMethod
{
	SM_BEG,
	SM_CUR,
	SM_END
};

/// Corresponds to POSIX struct flock.
struct FileLock
{
	short    l_type;   ///< Type of lock: F_RDLCK, F_WRLCK, or F_UNLCK.
	short    l_whence; ///< Where `l_start' is relative to (SeekMethod).
	FileOff  l_start;  ///< Offset where the lock begins.
	FileSize l_len;    ///< Size of the locked area; zero means until EOF.
	long     l_pid;    ///< For POSIX compatibility, always zero.
};

valuetype AccessBuf supports Access
{
	Size read (in Pointer p, in Size cb) raises (RuntimeError);
	void write (in ConstPointer p, in Size cb) raises (RuntimeError);

	ConstPointer get_buffer_read (in unsigned long cb) raises (RuntimeError);
	Pointer get_buffer_write (in unsigned long cb) raises (RuntimeError);
	void release_buffer (in unsigned long cb) raises (RuntimeError);

	/// Current position.
	readonly attribute FileSize pos raises (RuntimeError);

	/// File size.
	readonly attribute FileSize size raises (RuntimeError);

	FileSize seek (in SeekMethod m, in FileOff off) raises (RuntimeError);

	void flush () raises (RuntimeError);

	boolean lock (inout FileLock fl, in short op) raises (RuntimeError);

	/// Get file direct accessor.
	/// If file is closed, returns nil reference.
	readonly attribute AccessDirect direct;

	private Bytes buffer;
	private AccessDirect access;
	private FileSize position;
	private unsigned long block_size;
	private unsigned short flags;
	private char eol [2];
};

};

#endif
