/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
module Nirvana {

/// Time service
pseudo interface Chrono
{
	/// Time duration in nanoseconds
	typedef unsigned long long Duration;

	/// Epoch year
	readonly attribute unsigned short epoch;

	/// Duration since 1 Jan of the epoch year
	readonly attribute Duration system_clock;

	/// Duration since system startup.
	readonly attribute Duration monotonic_clock;

	/// Convert system time to monotonic
	/// 
	/// \param epoch Source epoch to convert
	/// \param clock Count of nanoseconds since 1 Jan of epoch
	/// \returns Local monotonic time
	Duration system_to_monotonic (in unsigned short epoch, in Duration clock);

	/// Convert monotonic time to system time relative to the current epoch
	/// 
	/// \param monotonic Local monotonic time
	/// \returns Local system time
	Duration monotonic_to_system (in Duration monotonic);

	/// Create deadline
	/// 
	/// \param timeout Timeout
	/// \returns Deadline as local monotonic time
	Duration create_deadline (in Duration timeout);
};

};
