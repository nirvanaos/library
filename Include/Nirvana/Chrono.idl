/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_CHRONO_IDL_
#define NIRVANA_CHRONO_IDL_

#include <CORBA/TimeBase.idl>

module Nirvana {

typedef unsigned long long SteadyTime;
typedef unsigned long long DeadlineTime;

/// Time operations.
pseudo interface Chrono
{
	///@{
	/// Time operations.

	/// Current system time with time zone information.
	TimeBase::UtcT system_clock ();

	/// Current UTC time.
	TimeBase::UtcT UTC ();

	/// Duration since system startup in 100 ns intervals.
	SteadyTime steady_clock ();

	/// Duration since system startup.
	DeadlineTime deadline_clock ();

	/// Steady clock frequency, Hz.
	readonly attribute DeadlineTime deadline_clock_frequency;

	/// Convert UTC time to the local deadline time.
	/// 
	/// \param utc UTC time.
	/// \returns Local deadline time.
	DeadlineTime deadline_from_UTC (in TimeBase::UtcT utc);

	/// Convert local deadline time to UTC time.
	/// 
	/// \param dt Local deadline time.
	/// \returns UTC time.
	TimeBase::UtcT deadline_to_UTC (in DeadlineTime deadline);

	///@}

	///@{
	/// Deadline management.

	/// Make deadline.
	/// 
	/// \param timeout A timeout from the current time.
	/// \return Deadline time as local steady clock value.
	DeadlineTime make_deadline (in TimeBase::TimeT timeout);

	/// Current execution domain deadline.
	readonly attribute DeadlineTime deadline;

	/// Specifies how to assign deadline to the new asynchronous calls.
	/// 0 - Inherit deadline of the parent execution domain.
	/// INFINITE_DEADLINE - Set INFINITE_DEADLINE.
	/// Other values - Make deadline based on a timeout.
	typedef DeadlineTime DeadlinePolicy;

	const DeadlinePolicy DEADLINE_POLICY_INFINITE = 0xFFFFFFFFFFFFFFFF;
	const DeadlinePolicy DEADLINE_POLICY_INHERIT = 0;

	/// Deadline policy for asynchronous calls.
	/// Default is DEADLINE_INHERIT.
	attribute DeadlinePolicy deadline_policy_async;

	/// Deadline policy for oneway calls.
	/// Default is DEADLINE_INFINITE.
	attribute DeadlinePolicy deadline_policy_oneway;

	///@}

	/// Reschedule current execution domain and let other tasks to be executed.
	/// Must be called in long foreground tasks.
	/// If current task is background, yield() does nothing and returns `false`.
	/// 
	/// \returns `true` if the task was rescheduled.
	boolean yield ();

	/// Suspend execution for the specified period.
	/// 
	/// We don't recommend to use it in the servant implementations.
	/// Use TimerEventService instead.
	/// 
	/// \param period100ns Sleep time in 100 ns intervals.
	void sleep (in TimeBase::TimeT period100ns);
};

const Chrono the_chrono;

};

#endif
