/// \file
/// National Languages Support
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_NLS_IDL_
#define NIRVANA_NLS_IDL_

module Nirvana {

native ConstCharPtr;
native Int;

/// A NLS code page.
/// 
/// Only single-byte code pages are supported.
pseudo interface CodePage
{
	/// Convert narrow character to wide character.
	/// 
	/// \param narrow A narrow character.
	/// \returns Wide character.
	unsigned long to_wide (in octet narrow);

	/// Convert wide character to narrow character.
	/// 
	/// \param wide A wide character.
	/// \param default_char Character to use if a character cannot be represented in the specified
	///   code page. If \p default_char > 0x7F and a character cannot be represented in the specified
	///   code page, CORBA::CODESET_INCOMPATIBLE exception will be thrown.
	/// \param [out] used_default If default character is specified and was used,
	///   \p used_default set to `true`.
	/// \returns Narrow character.
	octet to_narrow (in unsigned long wide, in octet default_char, out boolean used_default);

	/// Do not use default character.
	const octet NO_DEFAULT = 0xFF;

	/// Character category flags
	typedef unsigned short CharCategory;

	/// Uppercase letters
	const CharCategory CC_UPPER = 0x0001;
	
	/// Lowercase letters
	const CharCategory CC_LOWER = 0x0002;
	
	/// Letters
	const CharCategory CC_ALPHA = CC_UPPER | CC_LOWER;
	
	/// Digits
	const CharCategory CC_DIGIT = 0x0004;

	/// Letters and numeric digits
	const CharCategory CC_ALNUM = CC_ALPHA | CC_DIGIT;

	/// Punctuation characters
	const CharCategory CC_PUNCT = 0x0008;

	/// White-space characters
	const CharCategory CC_SPACE = 0x0010;

	/// Control characters
	const CharCategory CC_CNTRL = 0x0020;

	/// Printable characters, not including the <space>
	const CharCategory CC_GRAPH = CC_ALNUM | CC_PUNCT;

	/// Printable characters, including the <space>
	const CharCategory CC_PRINT = CC_GRAPH | CC_SPACE;

	/// Hexadecimal digits
	const CharCategory CC_XDIGIT = 0x0040;

	/// Characters to be classified as blank characters.
	/// <space> and <tab>
	const CharCategory CC_BLANK = 0x0080;

	/// Obtain character category flags
	/// 
	/// \param c A character
	/// \returns A combination of the CC_... flags
	CharCategory get_category (in octet c);

	/// Convert character to uppercase
	/// 
	/// \param c A character
	/// \returns Uppercase character
	octet to_upper (in octet c);

	/// Convert character to lowercase
	/// 
	/// \param c A character
	/// \returns Lowercase character
	octet to_lower (in octet c);

	/// Standard OSF code page id.
	/// 
	/// See OSF Character and Code Set Registry, OSF DCE FRC 40.1
	/// Also: ftp://ftp.opengroup.org:/pub/code_set_registry
	readonly attribute unsigned long id;
};

native LconvConstPtr;

pseudo interface Locale
{
	/// The code page. nil means UTF-8 CP.
	readonly attribute CodePage code_page;

	/// Returns pointer to the struct lconv.
	readonly attribute LconvConstPtr localeconv;

	ConstCharPtr get_name (in Int category);
};

};

#endif
