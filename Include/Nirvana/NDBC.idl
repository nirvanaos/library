/// \file Database connection module.
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NDBC_IDL_
#define NDBC_IDL_

/// \brief Database connectivity module.
/// Inspired by the JDBC API.
/// 
module NDBC {

/// \brief An exception that provides information on database access warnings.
/// 
/// Warnings are silently chained to the object whose method caused it to be reported.
/// Warnings may be retrieved from Connection, Statement, and ResultSet objects.
/// Trying to retrieve a warning on a connection after it has been closed will cause an exception
/// to be thrown.
/// Similarly, trying to retrieve a warning on a statement after it has been closed or on a result
/// set after it has been closed will cause an exception to be thrown.
/// Note that closing a statement also closes a result set that it might have produced.
/// 
struct SQLWarning
{
	/// The vendor - specific exception code for this SQLException object.
	long errorCode;

	/// the SQLState for this SQLException object.
	string sqlState;
};

typedef sequence <SQLWarning> SQLWarnings;

/// An exception that provides information on a database access error or other errors.
exception SQLException
{
	SQLWarning error;
	SQLWarnings next;
};

/// \brief Data types

typedef char DataType;

const DataType DB_NULL = 0;
const DataType DB_BIGINT = 1;    ///< 64-bit integer.
const DataType DB_BINARY = 2;    ///< Binary data.
const DataType DB_DATE = 3;      ///< Day number since 15 October 1582 00:00 of the Gregorian Calendar.
const DataType DB_DATETIME = 4;  ///< TimeT
const DataType DB_DECIMAL = 5;   ///< Fixed point value
const DataType DB_DOUBLE = 6;    ///< 64-bit floating-point value
const DataType DB_FLOAT = 7;     ///< 32-bit floating-point value
const DataType DB_INT = 8;       ///< 32-bit integer
const DataType DB_SMALLINT = 9;  ///< 16-bit integer
const DataType DB_STRING = 10;   ///< Variable length character data
const DataType DB_TIME = 11;     ///< Time of day in 100ns intervals
const DataType DB_TINYINT = 12;  ///< Octet

typedef sequence <octet> Blob;

struct DecimalVal
{
	sequence <octet> digits; // Up to 16 bytes
	short fraction;
};

union Variant switch (DataType)
{
case DB_BIGINT:
case DB_TIME:
case DB_DATETIME:
	long long ll_val;
case DB_BINARY:
	Blob blob;
case DB_STRING:
	string s_val;
case DB_DATE:
case DB_INT:
	long l_val;
case DB_DECIMAL:
	DecimalVal decimal;
case DB_DOUBLE:
	double dbl_val;
case DB_FLOAT:
	float flt_val;
case DB_SMALLINT:
	short si_val;
case DB_TINYINT:
	octet byte_val;
};

typedef sequence <Variant> Row;
typedef sequence <Row> Rows;
typedef sequence <string> ColumnNames;

interface StatementBase;

interface Cursor
{
	Rows getNext (in unsigned long from, in unsigned long max_cnt, in unsigned long max_size)
		raises (SQLException);

	ColumnNames getColumnNames () raises (SQLException);

	StatementBase getStatement ();
};

typedef unsigned short Ordinal;

valuetype ResultSet
{
	const unsigned short FLAG_COLUMNS_CASE_SENSITIVE = 0x0001;
	const unsigned short FLAG_COLUMNS_NON_ASCII      = 0x0002;
	const unsigned short FLAG_FORWARD_ONLY           = 0x0004;
	const unsigned short FLAG_SCROLL_SENSITIVE       = 0x0008;

	enum RSType
	{
		TYPE_FORWARD_ONLY,
		TYPE_SCROLL_INSENSITIVE,
		TYPE_SCROLL_SENSITIVE
	};

	public unsigned long pageMaxCount;
	public unsigned long pageMaxSize;

	/// \brief Moves the cursor to the given row number in this ResultSet object.
	/// 
	/// If the row number is positive, the cursor moves to the given row number with respect to
	/// the beginning of the result set. The first row is row 1, the second is row 2, and so on.
	///
	/// If the given row number is negative, the cursor moves to an absolute row position with
	/// respect to the end of the result set.For example, calling the method absolute (-1) positions
	/// the cursor on the last row; calling the method absolute (-2) moves the cursor to the
	/// next-to-last row, and so on.
	///
	/// If the row number specified is zero, the cursor is moved to before the first row.
	///
	/// An attempt to position the cursor beyond the first/last row in the result set leaves the
	/// cursor before the first row or after the last row.
	/// 
	/// \param row The number of the row to which the cursor should move. A value of zero indicates
	///   that the cursor will be positioned before the first row; a positive number indicates the
	///   row number counting from the beginning of the result set; a negative number indicates the
	///   row number counting from the end of the result set.
	/// 
	/// \returns `true` if the cursor is moved to a position in this ResultSet object; `false` if the
	///   cursor is before the first row or after the last row.
	/// 
	boolean absolute (in long row) raises (SQLException);

	/// \brief Moves the cursor to the end of this ResultSet object, just after the last row.
	/// 
	/// This method has no effect if the result set contains no rows.
	/// 
	void afterLast () raises (SQLException);

	void beforeFirst () raises (SQLException);

	void clearWarnings ();

	void close ();

	Ordinal findColumn (in string columnLabel) raises (SQLException);

	boolean first () raises (SQLException);

	Ordinal getColumnCount () raises (SQLException);

	long long getBigInt (in Ordinal columnIndex) raises (SQLException);

	Blob getBlob (in Ordinal columnIndex) raises (SQLException);

	boolean getBoolean (in Ordinal columnIndex) raises (SQLException);

	octet getByte (in Ordinal columnIndex) raises (SQLException);

	any getDecimal (in Ordinal columnIndex) raises (SQLException);

	double getDouble (in Ordinal columnIndex) raises (SQLException);

	float getFloat (in Ordinal columnIndex) raises (SQLException);

	long getInt (in Ordinal columnIndex) raises (SQLException);

	unsigned long getRow () raises (SQLException);

	short getSmallInt (in Ordinal columnIndex) raises (SQLException);

	StatementBase getStatement () raises (SQLException);

	string getString (in Ordinal columnIndex) raises (SQLException);

	RSType getType () raises (SQLException);

	SQLWarnings getWarnings ();

	boolean isAfterLast ();
	boolean isBeforeFirst ();
	boolean isClosed ();
	boolean isFirst ();
	boolean isLast ();

	boolean last () raises (SQLException);

	boolean next () raises (SQLException);

	boolean previous () raises (SQLException);

	boolean relative (in long rows);

	/// Column names are initially empty and requested on demand.
	private ColumnNames column_names;

	/// Fetched rows cache.
	private Rows cache;

	/// The underlying cursor
	private Cursor cursor;

	/// Column count
	private Ordinal column_count;

	/// Flags
	private unsigned short flags;

	/// Current row number. 0 - before the first record.
	private unsigned long row;

	/// Position of the current record in the records cache.
	private unsigned long cache_row;

	private boolean after_last;

	factory create (in Ordinal column_count, in unsigned short flags, in NDBC::Cursor cur,
		in Rows init_cache, in unsigned long page_max_cnt, in unsigned long page_max_size);
};

interface Connection;

interface StatementBase
{
	void close ();
	void clearWarnings ();
	Connection getConnection ();
	boolean getMoreResults ();
	ResultSet getResultSet () raises (SQLException);
	long getUpdateCount () raises (SQLException);
	SQLWarnings getWarnings ();
};

interface Statement : StatementBase
{
	boolean execute (in string sql) raises (SQLException);
	ResultSet executeQuery (in string sql) raises (SQLException);
	long executeUpdate (in string sql) raises (SQLException);
};

interface PreparedStatement : StatementBase
{
	/// Prepare for mutiple-times execution.
	const short PREPARE_PERSISTENT = 1;

	void clearParameters ();

	void setBigInt (in Ordinal idx, in long long v) raises (SQLException);
	void setBigIntByName (in string name, in long long v) raises (SQLException);

	void setBlob (in Ordinal idx, in Blob v) raises (SQLException);
	void setBlobByName (in string name, in Blob v) raises (SQLException);

	void setBoolean (in Ordinal idx, in boolean v) raises (SQLException);
	void setBooleanByName (in string name, in boolean v) raises (SQLException);

	void setByte (in Ordinal idx, in octet v) raises (SQLException);
	void setByteByName (in string name, in octet v) raises (SQLException);

	void setDecimal (in Ordinal idx, in any v) raises (SQLException);
	void setDecimalByName (in string name, in any v) raises (SQLException);

	void setDouble (in Ordinal idx, in double v) raises (SQLException);
	void setDoubleByName (in string name, in double v) raises (SQLException);

	void setFloat (in Ordinal idx, in float v) raises (SQLException);
	void setFloatByName (in string name, in float v) raises (SQLException);

	void setInt (in Ordinal idx, in long v) raises (SQLException);
	void setIntByName (in string name, in long v) raises (SQLException);

	void setNull (in Ordinal idx) raises (SQLException);
	void setNullByName (in string name) raises (SQLException);

	void setSmallInt (in Ordinal idx, in short v) raises (SQLException);
	void setSmallIntByName (in string name, in short v) raises (SQLException);

	void setString (in Ordinal idx, in string v) raises (SQLException);
	void setStringByName (in string name, in string v) raises (SQLException);

	boolean execute () raises (SQLException);
	ResultSet executeQuery () raises (SQLException);
	long executeUpdate () raises (SQLException);
};

interface CallableStatement : PreparedStatement
{};

interface Connection
{
	void abort ();
	attribute boolean autoCommit;
	attribute string catalog;
	void clearWarnings ();
	void close ();
	void commit ();
	Statement createStatement ();
	SQLWarnings getWarnings ();
	attribute long holdability;
	attribute string schema;
	readonly attribute boolean isClosed;
	attribute boolean isReadOnly;
	readonly attribute boolean isValid;
	string nativeSQL (in string sql) raises (SQLException);
	CallableStatement prepareCall (in string sql) raises (SQLException);
	PreparedStatement prepareStatement (in string sql, in unsigned short flags);
	void rollback ();
	attribute short transactionIsolation;
};

interface DataSource
{
	Connection getConnection (in string user, in string pwd) raises (SQLException);
};

interface Driver
{
	DataSource getDataSource (in string url) raises (SQLException);
};

/// \brief Used by DriverManager.
/// Clients do not need to use this interface.
/// The driver providers must implement it.
interface DriverFactory
{
	/// \brief Called exactly once by DriverManager to create the Driver object.
	/// 
	/// \returns The Driver object reference.
	/// 
	Driver getDriver ();
};

/// The basic service for managing a set of JDBC drivers.
interface DriverManager
{
	/// \brief Attempts to make a database connection to the given URL.
	/// 
	/// \param url Data source URL: <driver-id>:<driver-specific part>
	/// \param user Username (optional).
	/// \param pwd Password (optional).
	/// \returns Connection object.
	Connection getConnection (in string url, in string user, in string pwd) raises (SQLException);

	/// \brief Get data source.
	/// 
	/// \param url The data source URL: <driver-id>:<driver-specific part>
	/// \returns The DataSource object.
	DataSource getDataSource (in string url) raises (SQLException);

	/// \brief Get driver by id.
	/// 
	/// \param id The driver identifier, e. g. "sqlite". Case insensitive.
	/// \returns The Driver object.
	Driver getDriver (in string id);
};

/// Reference to the system DriverManager object.
const DriverManager manager;

};
