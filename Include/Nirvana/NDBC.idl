/// \file Database connectivity module.
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NDBC_IDL_
#define NDBC_IDL_

#include "NDBC_ex.idl"

/// \brief Database connectivity module.
module NDBC {

/// \brief Data types
/// 

typedef char DataType;

const DataType DB_NULL = 0;      ///< NULL value.
const DataType DB_BIGINT = 1;    ///< 64-bit integer.
const DataType DB_BINARY = 2;    ///< Binary data.
const DataType DB_DATE = 3;      ///< Day number since 15 October 1582 00:00 of the Gregorian Calendar.
const DataType DB_DATETIME = 4;  ///< TimeT
const DataType DB_DECIMAL = 5;   ///< Fixed point value
const DataType DB_DOUBLE = 6;    ///< 64-bit floating-point value
const DataType DB_FLOAT = 7;     ///< 32-bit floating-point value
const DataType DB_INT = 8;       ///< 32-bit integer
const DataType DB_SMALLINT = 9;  ///< 16-bit integer
const DataType DB_STRING = 10;   ///< Variable length character data
const DataType DB_TIME = 11;     ///< Time of day in 100ns intervals
const DataType DB_TINYINT = 12;  ///< Octet

typedef sequence <octet> Blob;

struct DecimalVal
{
	sequence <octet> digits; // Up to 16 bytes
	short fraction;
};

union Variant switch (DataType)
{
case DB_BIGINT:
case DB_TIME:
case DB_DATETIME:
	long long ll_val;
case DB_BINARY:
	Blob blob;
case DB_STRING:
	string s_val;
case DB_DATE:
case DB_INT:
	long l_val;
case DB_DECIMAL:
	DecimalVal decimal;
case DB_DOUBLE:
	double dbl_val;
case DB_FLOAT:
	float flt_val;
case DB_SMALLINT:
	short si_val;
case DB_TINYINT:
	octet byte_val;
};

typedef sequence <Variant> Row;
typedef unsigned long RowIdx;
typedef long RowOff;

typedef unsigned short Flags;

typedef sequence <string> ColumnNames;

interface StatementBase;

/// The cursor.
interface Cursor
{
	/// \brief Fetch row.
	/// 
	/// \param pos Row position.
	///		pos > 0 - relative to begin.
	///		pos < 0 - relative to end.
	///		pos == 0 - next row.
	/// 
	/// \param row Fetched row. If row is out of range, the empty sequence.
	/// 
	/// \returns Absolute row index.
	///   If pos >= 0 and reached the end of rowset, returns number of rows + 1
	///   (possible 0 on overflow).
	RowIdx fetch (in RowOff pos, out Row row) raises (SQLException);

	ColumnNames getColumnNames () raises (SQLException);

	StatementBase getStatement () raises (SQLException);

	void close ();
};

typedef unsigned short Ordinal;

/// \brief The result set.
/// 
valuetype ResultSet
{
	const Flags FLAG_COLUMNS_CASE_SENSITIVE = 0x0001;
	const Flags FLAG_FORWARD_ONLY           = 0x0004;
	const Flags FLAG_SCROLL_SENSITIVE       = 0x0008;

	enum Type
	{
		TYPE_FORWARD_ONLY,
		TYPE_SCROLL_INSENSITIVE,
		TYPE_SCROLL_SENSITIVE
	};

	/// \brief Moves the cursor to the given row number in this ResultSet object.
	/// 
	/// If the row number is positive, the cursor moves to the given row number with respect to
	/// the beginning of the result set. The first row is row 1, the second is row 2, and so on.
	///
	/// If the given row number is negative, the cursor moves to an absolute row position with
	/// respect to the end of the result set.For example, calling the method absolute (-1) positions
	/// the cursor on the last row; calling the method absolute (-2) moves the cursor to the
	/// next-to-last row, and so on.
	///
	/// If the row number specified is zero, the cursor is moved to before the first row.
	///
	/// An attempt to position the cursor beyond the first/last row in the result set leaves the
	/// cursor before the first row or after the last row.
	/// 
	/// \param row The number of the row to which the cursor should move. A value of zero indicates
	///   that the cursor will be positioned before the first row; a positive number indicates the
	///   row number counting from the beginning of the result set; a negative number indicates the
	///   row number counting from the end of the result set.
	/// 
	/// \returns `true` if the cursor is moved to a position in this ResultSet object; `false` if the
	///   cursor is before the first row or after the last row.
	/// 
	boolean absolute (in RowOff row) raises (SQLException);
	boolean relative (in RowOff rows) raises (SQLException);

	/// \brief Moves the cursor to the end of this ResultSet object, just after the last row.
	/// 
	/// This method has no effect if the result set contains no rows.
	/// 
	void afterLast () raises (SQLException);
	void beforeFirst () raises (SQLException);

	boolean first () raises (SQLException);
	boolean last () raises (SQLException);
	boolean next () raises (SQLException);
	boolean previous () raises (SQLException);

	boolean isAfterLast ();
	boolean isBeforeFirst ();
	boolean isFirst ();
	boolean isLast ();
	RowIdx getRow () raises (SQLException);

	SQLWarnings getWarnings ();
	void clearWarnings ();

	/// \brief Close result set.
	/// 
	/// NOTE: Affects all copies of this ResultSet value type.
	void close ();
	boolean isClosed ();

	Ordinal findColumn (in string columnLabel) raises (SQLException);
	Ordinal getColumnCount () raises (SQLException);
	readonly attribute ColumnNames getColumnNames raises (SQLException);

	long long getBigInt (in Ordinal columnIndex) raises (SQLException);
	Blob getBlob (in Ordinal columnIndex) raises (SQLException);
	boolean getBoolean (in Ordinal columnIndex) raises (SQLException);
	octet getByte (in Ordinal columnIndex) raises (SQLException);
	any getDecimal (in Ordinal columnIndex) raises (SQLException);
	double getDouble (in Ordinal columnIndex) raises (SQLException);
	float getFloat (in Ordinal columnIndex) raises (SQLException);
	long getInt (in Ordinal columnIndex) raises (SQLException);
	short getSmallInt (in Ordinal columnIndex) raises (SQLException);
	string getString (in Ordinal columnIndex) raises (SQLException);
	wstring getNString (in Ordinal columnIndex) raises (SQLException);

	StatementBase getStatement () raises (SQLException);

	Type getType () raises (SQLException);

	/// \brief Returns const reference to the current row data.
	readonly attribute Row currentRow raises (SQLException);

	/// \brief Create ResultSet
	/// 
	/// \param column_count Column count. 
	/// \param flags The flags.
	/// \param cur The cursor.
	/// \param first_row The first row data. If row is empty, the resultset considered as empty.
	factory create (in Ordinal column_count, in Flags flags, in NDBC::Cursor cur,
		in NDBC::Row first_row);

	// column_names is initially empty and requested on demand.
	private ColumnNames column_names;

	// Fetched row.
	private Row row;

	// The underlying cursor
	private Cursor cursor;

	// Column count
	private Ordinal column_count;

	// Flags
	private Flags flags;

	// Current row number. 0 - before the first record.
	private RowIdx position;

	// Last row number. 0 if unknown or empty resultset.
	private RowIdx last_row;

	// Current position is one beyond the last record.
	// (position == 1 && after_last) means the empty resultset.
	private boolean after_last;
};

interface Connection;

interface StatementBase
{
	/// Moves to this Statement object's next result, returns true if it is a ResultSet object,
	/// and implicitly closes any current ResultSet object(s) obtained with the method getResultSet.
	/// 
	/// There are no more results when the following is true:
	///     // stmt is a Statement object
	///     ((stmt->getMoreResults () == false) && (stmt->getUpdateCount () == -1))
	/// 
	/// \returns `true` if the next result is a ResultSet object; `false` if it is an update count
	///   or there are no more results.
	/// 
	/// \throws 
	///   SQLException If a database access error occurs or this method is called on a closed Statement.
	/// 
	boolean getMoreResults () raises (SQLException);

	/// Retrieves the current result as a ResultSet object. This method should be called only once
	/// per result.
	/// 
	/// \returns The current result as a ResultSet object or `nil` if the result is an update count
	///   or there are no more results.
	/// 
	/// \throws 
	///   SQLException If a database access error occurs or this method is called on a closed Statement.
	/// 
	ResultSet getResultSet () raises (SQLException);

	long getUpdateCount () raises (SQLException);

	void close ();
	boolean isClosed ();

	SQLWarnings getWarnings ();
	void clearWarnings ();

	ResultSet::Type getResultSetType ();

	Connection getConnection ();
};

interface Statement : StatementBase
{
	boolean execute (in string sql) raises (SQLException);
	ResultSet executeQuery (in string sql) raises (SQLException);
	unsigned long executeUpdate (in string sql) raises (SQLException);
};

interface PreparedStatement : StatementBase
{
	/// Prepare for mutiple-times execution.
	const short PREPARE_PERSISTENT = 1;

	void setBigInt (in Ordinal idx, in long long v) raises (SQLException);
	void setBigIntByName (in string name, in long long v) raises (SQLException);

	void setBlob (in Ordinal idx, in Blob v) raises (SQLException);
	void setBlobByName (in string name, in Blob v) raises (SQLException);

	void setBoolean (in Ordinal idx, in boolean v) raises (SQLException);
	void setBooleanByName (in string name, in boolean v) raises (SQLException);

	void setByte (in Ordinal idx, in octet v) raises (SQLException);
	void setByteByName (in string name, in octet v) raises (SQLException);

	void setDecimal (in Ordinal idx, in any v) raises (SQLException);
	void setDecimalByName (in string name, in any v) raises (SQLException);

	void setDouble (in Ordinal idx, in double v) raises (SQLException);
	void setDoubleByName (in string name, in double v) raises (SQLException);

	void setFloat (in Ordinal idx, in float v) raises (SQLException);
	void setFloatByName (in string name, in float v) raises (SQLException);

	void setInt (in Ordinal idx, in long v) raises (SQLException);
	void setIntByName (in string name, in long v) raises (SQLException);

	void setNull (in Ordinal idx) raises (SQLException);
	void setNullByName (in string name) raises (SQLException);

	void setSmallInt (in Ordinal idx, in short v) raises (SQLException);
	void setSmallIntByName (in string name, in short v) raises (SQLException);

	void setString (in Ordinal idx, in string v) raises (SQLException);
	void setStringByName (in string name, in string v) raises (SQLException);

	void setNString (in Ordinal idx, in wstring v) raises (SQLException);
	void setNStringByName (in string name, in wstring v) raises (SQLException);

	boolean execute () raises (SQLException);
	ResultSet executeQuery () raises (SQLException);
	unsigned long executeUpdate () raises (SQLException);

	void clearParameters () raises (SQLException);
};

typedef string Savepoint;

interface Connection
{
	enum TransactionIsolation
	{
		TRANSACTION_NONE,
		TRANSACTION_READ_COMMITTED,
		TRANSACTION_READ_UNCOMMITTED,
		TRANSACTION_REPEATABLE_READ,
		TRANSACTION_SERIALIZABLE
	};

	void close () raises (SQLException);
	boolean isClosed ();
	boolean isValid ();

	Statement createStatement (in ResultSet::Type resultSetType) raises (SQLException);
	PreparedStatement prepareCall (in string sql, in ResultSet::Type resultSetType)
		raises (SQLException);
	PreparedStatement prepareStatement (in string sql, in ResultSet::Type resultSetType,
		in short flags) raises (SQLException);

	SQLWarnings getWarnings ();
	void clearWarnings () raises (SQLException);

	/// \brief Retrieves the current auto-commit mode for this Connection object.
	/// 
	/// \returns The current state of this Connection object's auto-commit mode.
	/// 
	boolean getAutoCommit () raises (SQLException);

	/// \brief Sets this connection's auto-commit mode to the given state.
	/// 
	/// If a connection is in auto-commit mode, then all its SQL statements will be executed
	/// and committed as individual transactions. Otherwise, its SQL statements are grouped into
	/// transactions that are terminated by a call to either the method commit or the method rollback.
	/// By default, new connections are in auto-commit mode.
	/// 
	/// The commit occurs when the statement completes. The time when the statement completes depends
	/// on the type of SQL Statement:
	///   - For DML statements, such as Insert, Update or Delete, and DDL statements, the statement
	///     is complete as soon as it has finished executing.
	///   - For Select statements, the statement is complete when the associated result set is closed.
	///   - For CallableStatement objects or for statements that return multiple results, the statement
	///     is complete when all of the associated result sets have been closed, and all update counts
	///     and output parameters have been retrieved.
	/// 
	/// \note
	/// If this method is called during a transaction and the auto - commit mode is changed,
	/// the transaction is committed. If setAutoCommit is called and the auto - commit mode
	/// is not changed, the call is a no - op.
	/// 
	/// \param autoCommit `true` to enable auto-commit mode; `false` to disable it.
	/// 
	void setAutoCommit (in boolean autoCommit) raises (SQLException);
	void commit () raises (SQLException);

	string getCatalog () raises (SQLException);
	void setCatalog (in string catalog) raises (SQLException);

	string getSchema () raises (SQLException);
	void setSchema (in string schema) raises (SQLException);

	TransactionIsolation getTransactionIsolation () raises (SQLException);
	void setTransactionIsolation (in short level) raises (SQLException);

	boolean isReadOnly ();
	void setReadOnly (in boolean ro) raises (SQLException);

	Savepoint setSavepoint (in string name) raises (SQLException);
	void releaseSavepoint (in Savepoint savepoint) raises (SQLException);
	void rollback (in Savepoint savepoint) raises (SQLException);
};

interface Driver
{
	/// \brief Attempts to make a database connection to the given URL.
	/// 
	/// \param url Data source URL: <driver-id>:<driver-specific part>
	/// \param user Username (optional).
	/// \param pwd Password (optional).
	/// \returns Connection object.
	Connection connect (in string url, in string user, in string password) raises (SQLException);

	readonly attribute string version; ///< Driver version.
};

};

/// SQLite driver is always included in the installation.
module SQLite {

const NDBC::Driver driver;

};
