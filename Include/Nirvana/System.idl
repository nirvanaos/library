/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_SYSTEM_IDL_
#define NIRVANA_SYSTEM_IDL_

#include "Memory.idl"
#include "RuntimeError.idl"
#include <CORBA/TimeBase.idl>
#include <CORBA/CosNaming.idl>

module CORBA {
module Internal {

native _Interface;

};
};

typedef unsigned short mode_t;

module Nirvana {

/// /// \brief Used for iterator debugging.
/// May be used for other purposes.
pseudo interface RuntimeProxy
{
	/// Pointer passed to System::runtime_proxy_get
	///   or `nullptr` if System::runtime_proxy_remove was called.
	readonly attribute ConstPointer _object;
};

native SigactionPtr;
native SigactionConstPtr;
native Deleter;

typedef unsigned long long SteadyTime;
typedef unsigned long long DeadlineTime;

valuetype AccessBuf;
interface AccessChar;

/// General system interface
pseudo interface System
{
	///@{
	/// Object binding

	/// Binds a static object.
	/// 
	/// This method can bind objects from other protection domains.
	/// 
	/// \param name The object name.
	/// \returns Object.
	/// \throws OBJECT_NOT_EXIST Object with that name not found.
	/// \throws INV_OBJREF Object with that name exists but it is pseudo object.
	Object bind (in string name);

	/// Binds a static pseudo object.
	/// 
	/// This method binds objects in the current protection domain only.
	/// So if the implementation is not present for the current platform,
	/// OBJECT_NOT_EXIST will be thrown.
	/// 
	/// \param name The object name.
	/// \param interface_id The interface id.
	/// \throws OBJECT_NOT_EXIST Object with that name not found.
	/// \throws INV_OBJREF Object with that name exists but does not support the interface specified.
	CORBA::Internal::_Interface bind_interface (in string name, in string interface_id);

	///@}

	///@{
	/// Runtime proxy support
	/// Used for debug iterators. Can be used for other porposes also.

	/// Search map for runtime proxy for object \p obj.
	/// If proxy exists, returns it. Otherwise creates a new one.
	/// 
	/// \param obj Pointer used as a key.
	/// \returns RuntimeProxy for obj.
	///          If runtime support is disabled, returns `nil` reference.
	RuntimeProxy runtime_proxy_get (in ConstPointer obj);

	/// Remove runtime proxy for object \p obj.
	/// \param obj Pointer used as a key.
	void runtime_proxy_remove (in ConstPointer obj);

	///@}

	///@{
	/// Time operations.

	/// Current system time with time zone information.
	TimeBase::UtcT system_clock ();

	/// Current UTC time.
	TimeBase::UtcT UTC ();

	/// Duration since system startup in 100 ns intervals.
	SteadyTime steady_clock ();

	/// Duration since system startup.
	DeadlineTime deadline_clock ();

	/// Steady clock frequency, Hz.
	readonly attribute DeadlineTime deadline_clock_frequency;

	/// Convert UTC time to the local deadline time.
	/// 
	/// \param utc UTC time.
	/// \returns Local deadline time.
	DeadlineTime deadline_from_UTC (in TimeBase::UtcT utc);

	/// Convert local deadline time to UTC time.
	/// 
	/// \param dt Local deadline time.
	/// \returns UTC time.
	TimeBase::UtcT deadline_to_UTC (in DeadlineTime deadline);

	///@}
	
	///@{
	/// Deadline management.

	/// Make deadline.
	/// 
	/// \param timeout A timeout from the current time.
	/// \return Deadline time as local steady clock value.
	DeadlineTime make_deadline (in TimeBase::TimeT timeout);

	/// Current execution domain deadline.
	readonly attribute DeadlineTime deadline;

	/// Specifies how to assign deadline to new asynchronous calls.
	enum DeadlinePolicyType
	{
		DEADLINE_INHERIT,  ///< Inherit deadline of the parent execution domain.
		DEADLINE_INFINITE, ///< Set INFINITE_DEADLINE.
		DEADLINE_TIMEOUT   ///< Make deadline based on a timeout.
	};

	/// Specifies how to assign deadline to new asynchronous calls.
	union DeadlinePolicy switch (DeadlinePolicyType) {
		case DEADLINE_TIMEOUT: TimeBase::TimeT timeout;
	};

	/// Deadline policy for asynchronous calls.
	/// Default is DeadlinePolicyType::DEADLINE_INHERIT.
	attribute DeadlinePolicy deadline_policy_async;

	/// Deadline policy for oneway calls.
	/// Default is DeadlinePolicyType::DEADLINE_INFINITE.
	attribute DeadlinePolicy deadline_policy_oneway;

	///@}

	/// C runtime error number location (errno).
	readonly attribute Pointer error_number;

	/// Create heap
	/// 
	/// \param granularity Allocation unit size.
	///        Must be power of 2. If granularity = 0, the heap will be created
	///        with default granularity.
	Memory create_heap (in unsigned short granularity);

	/// Raise signal.
	void raise (in short signum);

	/// Currently not implemented.
	void sigaction (in short signum, in SigactionConstPtr act, in SigactionPtr oldact);

	/// Pseudo-random number generator initialization.
	/// 
	/// \param seed An integer value to be used as seed by the pseudo-random number generator algorithm.
	void srand (in unsigned long seed);

	/// Generate random number.
	/// 
	/// \returns An integer value between 0 and RAND_MAX.
	short rand ();

	/// \returns the number of concurrent threads supported by the implementation.
	readonly attribute Size hardware_concurrency;

	/// \returns `true` if current execution context is legacy.
	readonly attribute boolean is_legacy_mode;

	/// Debug event type
	enum DebugEvent
	{
		DEBUG_INFO,    ///< Trace.
		DEBUG_WARNING, ///< Warning.
		DEBUG_ASSERT,  ///< Assertion failed.
		DEBUG_ERROR    ///< Error.
	};

	/// Generate debug event.
	/// 
	/// \param type Debug event type.
	///             If type >= DEBUG_INFO, the program execution will be interrupted
	///             and the debugger will be invoked, if possible.
	///             If type >= DEBUG_ASSERT and debugger is not available, causes abortion of
	///             the current execution domain.
	/// 
	/// \param message     Debug message.
	/// \param file_name   (optional) Source file name.
	/// \param line_number (optional) Source line number.
	void debug_event (in DebugEvent type, in string message, in string file_name, in long line_number);

	/// Reschedule current execution domain and let other tasks to be executed.
	/// Must be called in long foreground tasks.
	/// If current task is background, yield() does nothing and returns `false`.
	/// 
	/// \returns `true` if the task was rescheduled.
	boolean yield ();

	/// Allocate TLS cell.
	///
	/// \returns TLS cell index.
	unsigned short TLS_alloc ();

	/// Free TLS cell.
	///
	/// \param idx TLS index allocated by TLS_alloc.
	void TLS_free (in unsigned short idx);

	/// Set TLS value.
	/// 
	/// \param idx TLS cell number.
	/// \param ptr The new value.
	void TLS_set (in unsigned short idx, in Pointer ptr);

	/// Get TLS value.
	/// 
	/// \param idx TLS cell number.
	/// \returns The value set by TLS_set or `nullptr`.
	Pointer TLS_get (in unsigned short idx);

	/// Get Naming Service name from file system path.
	/// 
	/// Note that if you have an absolute standard path like "/home" and want to obtain reference to
	/// the file system object, you don't need this API. Just call resolve_str () on NameService.
	/// 
	/// \param [in out] name Naming Service compound name.
	///   On input may contain parent directory name. If \p path is absolute like "/var/tmp" or "C:",
	///   the \p name initial value ignored. Otherwise it is used as a parent for \p path.
	///   To obtain the absolute path relative to current working directory, use get_current_dir_name ()
	///   as initial value for \p name.
	///   On output contains the resulting compound name.
	///
	/// \param path File or directory path.
	///   Path may be standard path like "/var/log" or host-specific file path like "C:\\mydir" in Windows.
	/// 
	void get_name_from_path (inout CosNaming::Name name, in string path)
		raises (CosNaming::NamingContext::InvalidName);

	/// Returns current working directory name.
	/// The returned name is always absolute.
	CosNaming::Name get_current_dir_name ();

	/// Changes the current working directory of the current domain to the directory specified in \p path.
	void chdir (in string path) raises (
		CosNaming::NamingContext::InvalidName, CosNaming::NamingContext::NotFound, RuntimeError);

	///@{
	/// POSIX file descriptor API.
	
	enum FileDestriptorType
	{
		FD_EMPTY,
		FD_BUF,
		FD_CHAR
	};

	union FileDescriptor switch (FileDestriptorType) {
	case FD_BUF: AccessBuf access_buf;
	case FD_CHAR: AccessChar access_char;
	};

	/// POSIX open()
	short open_fd (in string path, in unsigned short flags, in mode_t mode);

	/// Get file descriptor by index.
	/// 
	void get_fd (in short idx, out FileDescriptor fd);

	/// Close file descriptor.
	/// 
	void close_fd (in short idx);
};

};

#endif
