/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_SYSTEM_IDL_
#define NIRVANA_SYSTEM_IDL_

#include <CORBA/CosNaming.idl>

typedef unsigned short mode_t;

module Nirvana {

native Pointer; ///< void*
native ConstPointer; ///< const void*
native Size; ///< size_t
native SigactionPtr;
native SigactionConstPtr;
native Deleter;
native Int;
native UInt;
native UIntPtr; ///< uintptr_t

typedef unsigned long long FileSize;
typedef long long FileOff;

abstract interface Access;

/// General system interface
pseudo interface System
{
	/// C runtime error number location (errno).
	readonly attribute Pointer error_number;

	/// Raise signal.
	void raise (in short signum);

	/// Currently not implemented.
	void sigaction (in short signum, in SigactionConstPtr act, in SigactionPtr oldact);

	/// Pseudo-random number generator initialization.
	/// 
	/// \param seed An integer value to be used as seed by the pseudo-random number generator algorithm.
	void srand (in UInt seed);

	/// Generate random number.
	/// 
	/// \returns An integer value between 0 and RAND_MAX.
	Int rand ();

	/// \returns the number of concurrent threads supported by the implementation.
	readonly attribute Size hardware_concurrency;

	///@{
	/// Execution and synchronization context.
	
	/// Synchronization and execution context type.
	enum ContextType
	{
		/// Execution context is a Nirvana process.
		/// Global variables are read-write.
		/// Object creation is prohibited.
		PROCESS,

		/// This is a synchronization domain.
		/// Global variables are read-only.
		SYNC_DOMAIN,

		/// Free synchronization context.
		/// Global variables are read-only.
		FREE,

		/// Class library initialization code executed in the free synchronization context.
		/// Global variables are read-write.
		FREE_MODULE_INIT,

		/// Class library termination code executed in the free synchronization context.
		/// Global variables are read-write.
		/// Object creation is prohibited.
		/// Object binding is prohibited.
		FREE_MODULE_TERM,

		/// This is synchronization domain in singleton module.
		/// Global variables are read-write.
		SYNC_DOMAIN_SINGLETON,

		/// Singleton termination code executed in the synchronization domain.
		/// Global variables are read-write.
		/// Object creation is prohibited.
		/// Object binding is prohibited.
		SINGLETON_TERM
	};

	/// \returns Current execution context type.
	readonly attribute ContextType context_type;

	///@}

	///@{
	/// Thread local storage.

	/// Allocate TLS cell.
	///
	/// \param deleter Optional deleter function.
	/// \returns TLS cell index.
	unsigned short TLS_alloc (in Deleter deleter);

	/// Free TLS cell.
	///
	/// \param idx TLS index allocated by TLS_alloc.
	void TLS_free (in unsigned short idx);

	/// Set TLS value.
	/// 
	/// \param idx TLS cell number.
	/// \param ptr The new value.
	void TLS_set (in unsigned short idx, in Pointer ptr);

	/// Get TLS value.
	/// 
	/// \param idx TLS cell number.
	/// \returns The value set by TLS_set or `nullptr`.
	Pointer TLS_get (in unsigned short idx);

	///@}

	///@{
	/// File system.

	/// Convert compound name to string without borrowing of the Name Service
	/// 
	/// \param n Compound name.
	/// \returns Strigified name.
	string to_string (in CosNaming::Name n) raises (CosNaming::NamingContext::InvalidName);

	/// Convert stringified name to compound name without borrowing of the Name Service
	/// 
	/// \param sn Stringified name.
	/// \returns Compound name.
	CosNaming::Name to_name (in string sn) raises (CosNaming::NamingContext::InvalidName);

	/// Append file system path to the compound name.
	/// 
	/// \param [in out] name Naming Service compound name.
	///   On input may contain parent directory name. If \p path is absolute like "/var/tmp" or "C:",
	///   the \p name initial value ignored. Otherwise it is used as a parent for \p path.
	///   On output contains the resulting compound name.
	///
	/// \param path File or directory path.
	///   Path may be standard path like "/var/log" or host-specific file path like "C:\\mydir" in Windows.
	/// 
	/// \param absolute `true` for return absolute name. If absolute=`true` and path is relative,
	///   get_current_dir_name() will be called.
	///
	void append_path (inout CosNaming::Name name, in string path, in boolean absolute)
		raises (CosNaming::NamingContext::InvalidName);

	/// Returns current working directory name.
	/// The returned name is always absolute.
	CosNaming::Name get_current_dir_name ();

	/// Changes the current working directory of the current domain to the directory specified in \p path.
	void chdir (in string path) raises (
		CosNaming::NamingContext::InvalidName, CosNaming::NamingContext::NotFound);

	///@}

	///@{
	/// POSIX file descriptor API.
	
	/// Add file descriptor
	/// 
	/// \param access File access (can not be AccessDirect).
	unsigned short fd_add (in Access access);

	/// POSIX close()
	void close (in unsigned short fd);

	/// POSIX read()
	Size read (in unsigned short fd, in Pointer p, in Size size);

	/// POSIX write()
	void write (in unsigned short fd, in ConstPointer p, in Size size);

	/// POSIX lseek()
	FileSize seek (in unsigned short fd, in FileOff offset, in short whence);

	/// POSIX fcntl()
	unsigned short fcntl (in unsigned short fd, in short cmd, in UIntPtr arg);

	/// POSIX fsync()
	void flush (in unsigned short fd);

	/// POSIX dup2()
	void dup2 (in unsigned short src, in unsigned short dst);

	/// POSIX isatty()
	boolean isatty (in unsigned short fd);

	/// POSIX fungetc()
	void ungetc (in unsigned short fd, in short c);

	/// POSIX ferror()
	boolean ferror (in unsigned short fd);

	/// POSIX feof()
	boolean feof (in unsigned short fd);

	/// POSIX clearerr()
	void clearerr (in unsigned short fd);

	///@}

	readonly attribute Size exec_domain_id;
};

const System the_system;

};

#endif
