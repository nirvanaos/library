/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_SYSTEM_IDL_
#define NIRVANA_SYSTEM_IDL_

#include <CORBA/TimeBase.idl>
#include <CORBA/CosNaming.idl>
#include "BindError.idl"

module CORBA {
module Internal {

native _Interface;

};
};

module Nirvana {

typedef unsigned long long SteadyTime;
typedef unsigned long long DeadlineTime;

/// General system interface for interaction with Nirvana core.
pseudo interface System
{
	///@{
	/// Time operations.

	/// Current system time with time zone information.
	TimeBase::UtcT system_clock ();

	/// Current UTC time.
	TimeBase::UtcT UTC ();

	/// Duration since system startup in 100 ns intervals.
	SteadyTime steady_clock ();

	/// Duration since system startup.
	DeadlineTime deadline_clock ();

	/// Steady clock frequency, Hz.
	readonly attribute DeadlineTime deadline_clock_frequency;

	/// Convert UTC time to the local deadline time.
	/// 
	/// \param utc UTC time.
	/// \returns Local deadline time.
	DeadlineTime deadline_from_UTC (in TimeBase::UtcT utc);

	/// Convert local deadline time to UTC time.
	/// 
	/// \param dt Local deadline time.
	/// \returns UTC time.
	TimeBase::UtcT deadline_to_UTC (in DeadlineTime deadline);

	///@}

	///@{
	/// Deadline management.

	/// Make deadline.
	/// 
	/// \param timeout A timeout from the current time.
	/// \return Deadline time as local steady clock value.
	DeadlineTime make_deadline (in TimeBase::TimeT timeout);

	/// Current execution domain deadline.
	readonly attribute DeadlineTime deadline;

	/// Specifies how to assign deadline to the new asynchronous calls.
	/// 0 - Inherit deadline of the parent execution domain.
	/// INFINITE_DEADLINE - Set INFINITE_DEADLINE.
	/// Other values - Make deadline based on a timeout.
	typedef DeadlineTime DeadlinePolicy;

	const DeadlinePolicy DEADLINE_POLICY_INFINITE = 0xFFFFFFFFFFFFFFFF;
	const DeadlinePolicy DEADLINE_POLICY_INHERIT = 0;

	/// Deadline policy for asynchronous calls.
	/// Default is DEADLINE_INHERIT.
	attribute DeadlinePolicy deadline_policy_async;

	/// Deadline policy for oneway calls.
	/// Default is DEADLINE_INFINITE.
	attribute DeadlinePolicy deadline_policy_oneway;

	///@}

	/// Reschedule current execution domain and let other tasks to be executed.
	/// Must be called in long foreground tasks.
	/// If current task is background, yield() does nothing and returns `false`.
	/// 
	/// \returns `true` if the task was rescheduled.
	boolean yield ();

	///@{
	/// Execution and synchronization context.
	
	/// Synchronization and execution context type.
	enum ContextType
	{
		/// Execution context is a Nirvana process.
		/// Global variables are read-write.
		/// Object creation is prohibited.
		PROCESS,

		/// This is a synchronization domain.
		/// Global variables are read-only.
		SYNC_DOMAIN,

		/// Free synchronization context.
		/// Global variables are read-only.
		FREE,

		/// Class library initialization code executed in the free synchronization context.
		/// Global variables are read-write.
		FREE_MODULE_INIT,

		/// Class library termination code executed in the free synchronization context.
		/// Global variables are read-write.
		/// Object creation is prohibited.
		/// Object binding is prohibited.
		FREE_MODULE_TERM,

		/// This is synchronization domain in singleton module.
		/// Global variables are read-write.
		SYNC_DOMAIN_SINGLETON,

		/// Singleton termination code executed in the synchronization domain.
		/// Global variables are read-write.
		/// Object creation is prohibited.
		/// Object binding is prohibited.
		SINGLETON_TERM
	};

	/// \returns Current execution context type.
	readonly attribute ContextType context_type;

	///@}

	///@{
	/// File system.

	/// Convert compound name to string without borrowing of the Name Service
	/// 
	/// \param n Compound name.
	/// \returns Strigified name.
	string to_string (in CosNaming::Name n) raises (CosNaming::NamingContext::InvalidName);

	/// Convert stringified name to compound name without borrowing of the Name Service
	/// 
	/// \param sn Stringified name.
	/// \returns Compound name.
	CosNaming::Name to_name (in string sn) raises (CosNaming::NamingContext::InvalidName);

	/// Append file system path to the compound name.
	/// 
	/// \param [in out] name Naming Service compound name.
	///   On input may contain parent directory name. If \p path is absolute like "/var/tmp" or "C:",
	///   the \p name initial value ignored. Otherwise it is used as a parent for \p path.
	///   On output contains the resulting compound name.
	///
	/// \param path File or directory path.
	///   Path may be standard path like "/var/log" or host-specific file path like "C:\\mydir" in Windows.
	/// 
	/// \param absolute `true` for return absolute name. If absolute=`true` and path is relative,
	///   get_current_dir() will be called.
	///
	void append_path (inout CosNaming::Name name, in string path, in boolean absolute)
		raises (CosNaming::NamingContext::InvalidName);

	/// Returns current working directory name.
	/// The returned name is always absolute.
	CosNaming::Name get_current_dir ();

	///@}

	/// Dynamic object binding.

	/// Binds an object.
	/// 
	/// Find static object by name, load the corresponding module and return object reference.
	/// This method can bind objects from other protection domains.
	/// 
	/// \param name The object name.
	/// \param interface_id The interface id.
	/// \returns Interface pointer.
	/// \throws Nirvana::BindError::Error;
	/// 
	CORBA::Internal::_Interface bind (in string name, in string interface_id)
		raises (BindError::Error);

	/// \returns the number of concurrent threads supported by the implementation.
	readonly attribute unsigned long hardware_concurrency;

	readonly attribute Size exec_domain_id;

	Platforms get_supported_platforms ();

};

const System the_system;

};

#endif
