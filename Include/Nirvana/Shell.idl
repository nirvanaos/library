/// \file
/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#ifndef NIRVANA_SHELL_IDL_
#define NIRVANA_SHELL_IDL_

#include "File.idl"
#include "BindError.idl"

module Nirvana {

native Int;

struct FileDescr
{
	FileSize pos;
	unsigned short flags;
	Access access;
	sequence <long> descriptors;
};

typedef sequence <FileDescr> FileDescriptors;

typedef sequence <string> StringSeq;

native Int;

pseudo interface Cmdlet
{
	Int run (inout StringSeq argv);
};

/// Shell helper.
interface Shell
{
	/// \brief Get file descriptors to inherit
	/// 
	/// \param std_creation_mask Mask for the standard streams: stdin, stdout, stderr
	/// \returns FileDescriptors
	FileDescriptors get_inherited_files (in unsigned short std_creation_mask);

	/// \brief Open binary file for reading
	/// 
	/// \param path The binary file path.
	/// \returns AccessDirect object with read-only access.
	AccessDirect open_binary (in string path);

	/// \brief Obtain platform identifier for a binary file.
	/// 
	/// \param binary Binary file access.
	/// \returns Platform id.
	PlatformId get_binary_platform (in AccessDirect binary);

	/// \brief Spawn process.
	/// 
	/// \param file The process binary module.
	/// \param argv The arguments.
	/// \param work_dir The working directory (can be empty string).
	/// \param files File descriptors to inherit. Use POSIX::get_inherites_files() to obtain.
	/// \returns Process exit code.
	long process (in AccessDirect file, in StringSeq argv, in string work_dir,
		in FileDescriptors files) raises (BindError::Error);

	/// \brief Run Cmdlet.
	/// 
	/// \param name The cmdlet name.
	/// \param argv The arguments.
	/// \param work_dir The working directory (can be empty string).
	/// \param files File descriptors to inherit. Use POSIX::get_inherites_files() to obtain.
	/// \returns Cmdlet exit code.
	long cmdlet (in string name, in StringSeq argv, in string work_dir,
		in FileDescriptors files) raises (BindError::Error);

	void create_pipe (out AccessChar pipe_out, out AccessChar pipe_in);
};

const Shell the_shell;

};

#endif
